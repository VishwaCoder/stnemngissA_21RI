The Spring Framework is an application framework and inversion of control container for the
"Java platform. The framework's core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE (Enterprise Edition) platform. Although the framework does not impose any specific programming model, it has become popular in the Java community as an addition to the Enterprise JavaBeans (EJB) model. The Spring Framework is open source."
"The first version was written by Rod Johnson, who released the framework with the publication of his book Expert One-on-One J2EE Design and Development in October 2002. The framework was first released under the Apache 2.0 license in June 2003. The first production release, 1.0, was released in March 2004.[2] The Spring 1.2.6 framework won a Jolt productivity award and a JAX Innovation Award in 2006.[3][4] Spring 2.0 was released in October 2006, Spring 2.5 in November 2007, Spring 3.0 in December 2009, Spring 3.1 in"
"December 2011, and Spring 3.2.5 in November 2013.[5] Spring Framework 4.0 was released in December 2013.[6] Notable improvements in Spring 4.0 included support for Java SE (Standard Edition) 8, Groovy 2, some aspects of Java EE 7, and WebSocket. Spring Boot 1.0 was released in April 2014.[7]"
"Spring Framework 4.2.0 was released on 31 July 2015 and was immediately upgraded to version 4.2.1, which was released on 01 Sept 2015.[8] It is ""compatible with Java 6, 7 and 8, with a focus on core refinements and modern web capabilities"".[9]"
"Spring Framework 4.3 has been released on 10 June 2016 and will be supported until 2020.[10] It ""will be the final generation within the general Spring 4 system requirements (Java 6+, Servlet 2.5+), [...]"".[9]"
Spring 5 is announced to be built upon Reactive Streams compatible Reactor Core.[11] The Spring Framework includes several modules that provide a range of services: Spring Core Container: this is the base module of Spring and provides spring containers (BeanFactory and ApplicationContext).[12]
"Aspect-oriented programming: enables implementing cross-cutting concerns.  Authentication and authorization: configurable security processes that support a range of standards, protocols, tools and practices via the Spring Security sub-project (formerly Acegi Security System for Spring)."
Convention over configuration: a rapid application development solution for Spring-based enterprise applications is offered in the Spring Roo module
Data access: working with relational database management systems on the Java platform using Java Database Connectivity (JDBC) and object-relational mapping tools and with NoSQL databases
"Inversion of control container: configuration of application components and lifecycle management of Java objects, done mainly via dependency injection"
"Messaging: configurative registration of message listener objects for transparent message- consumption from message queues via Java Message Service (JMS), improvement of message sending over standard JMS APIs"
Model–view–controller: an HTTP- and servlet-based framework providing hooks for extension and customization for web applications and RESTful (representational state transfer) Web services.
"Remote access framework: configurative remote procedure call (RPC)-style marshalling of Java objects over networks supporting Java remote method invocation (RMI), CORBA (Common Object Request Broker Architecture) and HTTP-based protocols including Web"
services (SOAP (Simple Object Access Protocol))
Transaction management: unifies several transaction management APIs and coordinates
transactions for Java objects
Remote management: configurative exposure and management of Java objects for local or remote configuration via Java Management Extensions (JMX)
Testing: support classes for writing unit tests and integration tests Inversion of control container (dependency injection)
"Central to the Spring Framework is its inversion of control (IoC) container, which provides a consistent means of configuring and managing Java objects using reflection. The container is responsible for managing object lifecycles of specific objects: creating these objects, calling their initialization methods, and configuring these objects by wiring them together."
Objects created by the container are also called managed objects or beans. The container can be configured by loading XML (Extensible Markup Language) files or detecting specific Java annotations on configuration classes. These data sources contain the bean definitions that provide the information required to create the beans.
"Objects can be obtained by means of either dependency lookup or dependency injection.[13] Dependency lookup is a pattern where a caller asks the container object for an object with a specific name or of a specific type. Dependency injection is a pattern where the container passes objects by name to other objects, via either constructors, properties, or factory methods."
"In many cases one need not use the container when using other parts of the Spring Framework, although using it will likely make an application easier to configure and customize. The Spring container provides a consistent mechanism to configure applications and integrates with almost all Java environments, from small-scale applications to large enterprise applications."
"The container can be turned into a partially compliant EJB (Enterprise JavaBeans) 3.0 container by means of the Pitchfork project. Some[who?] criticize the Spring Framework for not complying with standards.[14] However, SpringSource doesn't see EJB 3 compliance as a major goal, and claims that the Spring Framework and the container allow for more powerful programming models.[15] The programmer does not directly create an object, but describes how it should be created, by defining it in the Spring configuration file. Similarly services and components are not called directly; instead a Spring configuration file defines which services and components must be called. This IoC is intended to increase the ease of maintenance and testing."
Aspect-oriented programming framework
"The Spring Framework has its own Aspect-oriented programming (AOP) framework that modularizes cross-cutting concerns in aspects. The motivation for creating a separate AOP framework comes from the belief that it should be possible to provide basic AOP features without too much complexity in either design, implementation, or configuration. The Spring AOP framework also takes full advantage of the Spring container."
"The Spring AOP framework is proxy pattern-based, and is configured at run time. This removes the need for a compilation step or load-time weaving. On the other hand, interception only allows for public method-execution on existing objects at a join point. Compared to the AspectJ framework, Spring AOP is less powerful, but also less complicated. Spring 1.2 includes support to configure AspectJ aspects in the container. Spring 2.0 added more integration with AspectJ; for example, the pointcut language is reused and can be mixed with Spring AOP-based aspects. Further, Spring 2.0 added a Spring Aspects library that uses AspectJ to offer common Spring features such as"
declarative transaction management and dependency injection via AspectJ compile-time or
load-time weaving. SpringSource also uses AspectJ AOP in other Spring projects such as
"Spring Roo and Spring Insight, with Spring Security also offering an AspectJ-based aspect library."
Spring AOP has been designed to make it able to work with cross-cutting concerns inside the Spring Framework. Any object which is created and configured by the container can be enriched using Spring AOP.
"The Spring Framework uses Spring AOP internally for transaction management, security, remote access, and JMX."
"Since version 2.0 of the framework, Spring provides two approaches to the AOP configuration:"
schema-based approach[16] and
@AspectJ-based annotation style.[17]